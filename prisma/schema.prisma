generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model connection {
  id                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id1                       String   @db.Uuid
  user_id2                       String   @db.Uuid
  status                         String   @db.VarChar(255)
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  user_connection_user_id1Touser user     @relation("connection_user_id1Touser", fields: [user_id1], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_connection_user_id2Touser user     @relation("connection_user_id2Touser", fields: [user_id2], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model content {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type           String           @db.VarChar(255)
  title          String           @db.VarChar(255)
  description    String?          @db.VarChar(255)
  user_id        String?          @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user           user?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recommendation recommendation[]
}

model profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio        String?  @db.VarChar(255)
  location   String?  @db.VarChar(255)
  occupation String?  @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model recommendation {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_type String   @db.VarChar(255)
  content_id   String   @db.Uuid
  user_id      String?  @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  content      content  @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                String           @unique @db.VarChar(255)
  firstName                            String?          @db.VarChar(255)
  lastName                             String?          @db.VarChar(255)
  roq_user_id                          String           @db.VarChar(255)
  tenant_id                            String           @db.VarChar(255)
  created_at                           DateTime         @default(now()) @db.Timestamp(6)
  updated_at                           DateTime         @default(now()) @db.Timestamp(6)
  company                              company[]
  connection_connection_user_id1Touser connection[]     @relation("connection_user_id1Touser")
  connection_connection_user_id2Touser connection[]     @relation("connection_user_id2Touser")
  content                              content[]
  profile                              profile[]
  recommendation                       recommendation[]
}
